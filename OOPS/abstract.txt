- Abstract classes are classes which have one or more than one abstract methods.
- Abstract classes can contain both abstract methods(methods without implementation) 
and concrete methods(methods with implementation).
- Abstract classes are directly not provided by python.
- We have to import abc module to create abstract classes in python.
- We cannot instantiate the abstract classes.
- We use Abstract classes when we have to design large functional units or when we 
want to provide common interface for different implementations of a component.
- the syntax of importing abc module and creating abstract base class is : 
from abc import ABC,abstractmethod
class class_name(ABC): #ABC is getting inherited by this class
    #some code
- Abstract methods are methods which are declared in abstract base class but their
implementation is provided in the class which inherits them.
- Abstract methods are created using the decorator with the abstractmethod keyword.
- The syntax for creating abstract method is : 
@abstractmethod
def method_name:
    #some code

Program:  

from abc import ABC,abstractmethod
class demo(ABC):
    @abstractmethod
    def hello(self):
        pass
    def show(self):
        print("This is a normal method.")
class new(demo):
    def hello(self):
        print("Implementation given in new class.")
nn = new()
nn.hello()
nn.show()